class Solution {
public:
    int maxStudents(vector<vector<char>>& seats) {
        const int m = seats.size();
        const int n = seats[0].size();
        
        vector<int> s(m+1);
        for (int i=1; i<=m; ++i) {
            for (int j=0; j<n; ++j) {
                s[i] |= (seats[i-1][j] == '#') << j;
            }
        }
        
        vector<vector<int>> dp(m+1, vector<int>(1<<n));
        for (int i=1; i<=m; ++i) {
            for (int c=0; c<(1<<n); ++c) {
                if (c & (c>>1) || c & s[i]) continue;
                for (int l=0; l<(1<<n); ++l) {
                    if (l & s[i-1] || l & (c>>1) || c & (l>>1)) continue;
                    dp[i][c] = max(dp[i][c], dp[i-1][l] + __builtin_popcount(c));
                }
            }
        }
        return *max_element(dp[m].begin(), dp[m].end());
    }
};
